// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace PBMatch {

void protobuf_ShutdownFile_PBMatch_2eproto() {
  delete TcpRequestMatch::default_instance_;
  delete TcpCancelMatch::default_instance_;
  delete TcpResponseRequestMatch::default_instance_;
  delete TcpResponseCancelMatch::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PBMatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PBMatch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TcpRequestMatch::default_instance_ = new TcpRequestMatch();
  TcpCancelMatch::default_instance_ = new TcpCancelMatch();
  TcpResponseRequestMatch::default_instance_ = new TcpResponseRequestMatch();
  TcpResponseCancelMatch::default_instance_ = new TcpResponseCancelMatch();
  TcpRequestMatch::default_instance_->InitAsDefaultInstance();
  TcpCancelMatch::default_instance_->InitAsDefaultInstance();
  TcpResponseRequestMatch::default_instance_->InitAsDefaultInstance();
  TcpResponseCancelMatch::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMatch_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PBMatch_2eproto_once_);
void protobuf_AddDesc_PBMatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PBMatch_2eproto_once_,
                 &protobuf_AddDesc_PBMatch_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMatch_2eproto {
  StaticDescriptorInitializer_PBMatch_2eproto() {
    protobuf_AddDesc_PBMatch_2eproto();
  }
} static_descriptor_initializer_PBMatch_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int TcpRequestMatch::kUidFieldNumber;
const int TcpRequestMatch::kRoleIDFieldNumber;
#endif  // !_MSC_VER

TcpRequestMatch::TcpRequestMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMatch.TcpRequestMatch)
}

void TcpRequestMatch::InitAsDefaultInstance() {
}

TcpRequestMatch::TcpRequestMatch(const TcpRequestMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMatch.TcpRequestMatch)
}

void TcpRequestMatch::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcpRequestMatch::~TcpRequestMatch() {
  // @@protoc_insertion_point(destructor:PBMatch.TcpRequestMatch)
  SharedDtor();
}

void TcpRequestMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TcpRequestMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TcpRequestMatch& TcpRequestMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBMatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBMatch_2eproto();
#endif
  return *default_instance_;
}

TcpRequestMatch* TcpRequestMatch::default_instance_ = NULL;

TcpRequestMatch* TcpRequestMatch::New() const {
  return new TcpRequestMatch;
}

void TcpRequestMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TcpRequestMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, roleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TcpRequestMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBMatch.TcpRequestMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }

      // required int32 roleID = 2;
      case 2: {
        if (tag == 16) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMatch.TcpRequestMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMatch.TcpRequestMatch)
  return false;
#undef DO_
}

void TcpRequestMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMatch.TcpRequestMatch)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // required int32 roleID = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBMatch.TcpRequestMatch)
}

int TcpRequestMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // required int32 roleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpRequestMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TcpRequestMatch*>(&from));
}

void TcpRequestMatch::MergeFrom(const TcpRequestMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TcpRequestMatch::CopyFrom(const TcpRequestMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpRequestMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TcpRequestMatch::Swap(TcpRequestMatch* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TcpRequestMatch::GetTypeName() const {
  return "PBMatch.TcpRequestMatch";
}


// ===================================================================

#ifndef _MSC_VER
const int TcpCancelMatch::kUidFieldNumber;
#endif  // !_MSC_VER

TcpCancelMatch::TcpCancelMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMatch.TcpCancelMatch)
}

void TcpCancelMatch::InitAsDefaultInstance() {
}

TcpCancelMatch::TcpCancelMatch(const TcpCancelMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMatch.TcpCancelMatch)
}

void TcpCancelMatch::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcpCancelMatch::~TcpCancelMatch() {
  // @@protoc_insertion_point(destructor:PBMatch.TcpCancelMatch)
  SharedDtor();
}

void TcpCancelMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TcpCancelMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TcpCancelMatch& TcpCancelMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBMatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBMatch_2eproto();
#endif
  return *default_instance_;
}

TcpCancelMatch* TcpCancelMatch::default_instance_ = NULL;

TcpCancelMatch* TcpCancelMatch::New() const {
  return new TcpCancelMatch;
}

void TcpCancelMatch::Clear() {
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TcpCancelMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBMatch.TcpCancelMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMatch.TcpCancelMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMatch.TcpCancelMatch)
  return false;
#undef DO_
}

void TcpCancelMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMatch.TcpCancelMatch)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBMatch.TcpCancelMatch)
}

int TcpCancelMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpCancelMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TcpCancelMatch*>(&from));
}

void TcpCancelMatch::MergeFrom(const TcpCancelMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TcpCancelMatch::CopyFrom(const TcpCancelMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpCancelMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TcpCancelMatch::Swap(TcpCancelMatch* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TcpCancelMatch::GetTypeName() const {
  return "PBMatch.TcpCancelMatch";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TcpResponseRequestMatch::TcpResponseRequestMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMatch.TcpResponseRequestMatch)
}

void TcpResponseRequestMatch::InitAsDefaultInstance() {
}

TcpResponseRequestMatch::TcpResponseRequestMatch(const TcpResponseRequestMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMatch.TcpResponseRequestMatch)
}

void TcpResponseRequestMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcpResponseRequestMatch::~TcpResponseRequestMatch() {
  // @@protoc_insertion_point(destructor:PBMatch.TcpResponseRequestMatch)
  SharedDtor();
}

void TcpResponseRequestMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TcpResponseRequestMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TcpResponseRequestMatch& TcpResponseRequestMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBMatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBMatch_2eproto();
#endif
  return *default_instance_;
}

TcpResponseRequestMatch* TcpResponseRequestMatch::default_instance_ = NULL;

TcpResponseRequestMatch* TcpResponseRequestMatch::New() const {
  return new TcpResponseRequestMatch;
}

void TcpResponseRequestMatch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TcpResponseRequestMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBMatch.TcpResponseRequestMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:PBMatch.TcpResponseRequestMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMatch.TcpResponseRequestMatch)
  return false;
#undef DO_
}

void TcpResponseRequestMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMatch.TcpResponseRequestMatch)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBMatch.TcpResponseRequestMatch)
}

int TcpResponseRequestMatch::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpResponseRequestMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TcpResponseRequestMatch*>(&from));
}

void TcpResponseRequestMatch::MergeFrom(const TcpResponseRequestMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TcpResponseRequestMatch::CopyFrom(const TcpResponseRequestMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpResponseRequestMatch::IsInitialized() const {

  return true;
}

void TcpResponseRequestMatch::Swap(TcpResponseRequestMatch* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TcpResponseRequestMatch::GetTypeName() const {
  return "PBMatch.TcpResponseRequestMatch";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TcpResponseCancelMatch::TcpResponseCancelMatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMatch.TcpResponseCancelMatch)
}

void TcpResponseCancelMatch::InitAsDefaultInstance() {
}

TcpResponseCancelMatch::TcpResponseCancelMatch(const TcpResponseCancelMatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMatch.TcpResponseCancelMatch)
}

void TcpResponseCancelMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcpResponseCancelMatch::~TcpResponseCancelMatch() {
  // @@protoc_insertion_point(destructor:PBMatch.TcpResponseCancelMatch)
  SharedDtor();
}

void TcpResponseCancelMatch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TcpResponseCancelMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TcpResponseCancelMatch& TcpResponseCancelMatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBMatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBMatch_2eproto();
#endif
  return *default_instance_;
}

TcpResponseCancelMatch* TcpResponseCancelMatch::default_instance_ = NULL;

TcpResponseCancelMatch* TcpResponseCancelMatch::New() const {
  return new TcpResponseCancelMatch;
}

void TcpResponseCancelMatch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TcpResponseCancelMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBMatch.TcpResponseCancelMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:PBMatch.TcpResponseCancelMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMatch.TcpResponseCancelMatch)
  return false;
#undef DO_
}

void TcpResponseCancelMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMatch.TcpResponseCancelMatch)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBMatch.TcpResponseCancelMatch)
}

int TcpResponseCancelMatch::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpResponseCancelMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TcpResponseCancelMatch*>(&from));
}

void TcpResponseCancelMatch::MergeFrom(const TcpResponseCancelMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TcpResponseCancelMatch::CopyFrom(const TcpResponseCancelMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpResponseCancelMatch::IsInitialized() const {

  return true;
}

void TcpResponseCancelMatch::Swap(TcpResponseCancelMatch* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TcpResponseCancelMatch::GetTypeName() const {
  return "PBMatch.TcpResponseCancelMatch";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PBMatch

// @@protoc_insertion_point(global_scope)
