// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBBattle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace PBBattle {

void protobuf_ShutdownFile_PBBattle_2eproto() {
  delete BattleUserInfo::default_instance_;
  delete TcpEnterBattle::default_instance_;
  delete UdpBattleReady::default_instance_;
  delete UdpBattleStart::default_instance_;
  delete PlayerOperation::default_instance_;
  delete UdpUpPlayerOperations::default_instance_;
  delete AllPlayerOperation::default_instance_;
  delete UdpDownFrameOperations::default_instance_;
  delete UdpUpDeltaFrames::default_instance_;
  delete UdpDownDeltaFrames::default_instance_;
  delete UdpUpGameOver::default_instance_;
  delete UdpDownGameOver::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PBBattle_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PBBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BattleUserInfo::default_instance_ = new BattleUserInfo();
  TcpEnterBattle::default_instance_ = new TcpEnterBattle();
  UdpBattleReady::default_instance_ = new UdpBattleReady();
  UdpBattleStart::default_instance_ = new UdpBattleStart();
  PlayerOperation::default_instance_ = new PlayerOperation();
  UdpUpPlayerOperations::default_instance_ = new UdpUpPlayerOperations();
  AllPlayerOperation::default_instance_ = new AllPlayerOperation();
  UdpDownFrameOperations::default_instance_ = new UdpDownFrameOperations();
  UdpUpDeltaFrames::default_instance_ = new UdpUpDeltaFrames();
  UdpDownDeltaFrames::default_instance_ = new UdpDownDeltaFrames();
  UdpUpGameOver::default_instance_ = new UdpUpGameOver();
  UdpDownGameOver::default_instance_ = new UdpDownGameOver();
  BattleUserInfo::default_instance_->InitAsDefaultInstance();
  TcpEnterBattle::default_instance_->InitAsDefaultInstance();
  UdpBattleReady::default_instance_->InitAsDefaultInstance();
  UdpBattleStart::default_instance_->InitAsDefaultInstance();
  PlayerOperation::default_instance_->InitAsDefaultInstance();
  UdpUpPlayerOperations::default_instance_->InitAsDefaultInstance();
  AllPlayerOperation::default_instance_->InitAsDefaultInstance();
  UdpDownFrameOperations::default_instance_->InitAsDefaultInstance();
  UdpUpDeltaFrames::default_instance_->InitAsDefaultInstance();
  UdpDownDeltaFrames::default_instance_->InitAsDefaultInstance();
  UdpUpGameOver::default_instance_->InitAsDefaultInstance();
  UdpDownGameOver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBBattle_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PBBattle_2eproto_once_);
void protobuf_AddDesc_PBBattle_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PBBattle_2eproto_once_,
                 &protobuf_AddDesc_PBBattle_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBBattle_2eproto {
  StaticDescriptorInitializer_PBBattle_2eproto() {
    protobuf_AddDesc_PBBattle_2eproto();
  }
} static_descriptor_initializer_PBBattle_2eproto_;
#endif
bool RightOpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BattleUserInfo::kUidFieldNumber;
const int BattleUserInfo::kBattleIDFieldNumber;
const int BattleUserInfo::kRoleIDFieldNumber;
#endif  // !_MSC_VER

BattleUserInfo::BattleUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.BattleUserInfo)
}

void BattleUserInfo::InitAsDefaultInstance() {
}

BattleUserInfo::BattleUserInfo(const BattleUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.BattleUserInfo)
}

void BattleUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  battleid_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleUserInfo::~BattleUserInfo() {
  // @@protoc_insertion_point(destructor:PBBattle.BattleUserInfo)
  SharedDtor();
}

void BattleUserInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleUserInfo& BattleUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

BattleUserInfo* BattleUserInfo::default_instance_ = NULL;

BattleUserInfo* BattleUserInfo::New() const {
  return new BattleUserInfo;
}

void BattleUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, roleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BattleUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.BattleUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleID;
        break;
      }

      // required int32 battleID = 2;
      case 2: {
        if (tag == 16) {
         parse_battleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roleID;
        break;
      }

      // required int32 roleID = 3;
      case 3: {
        if (tag == 24) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.BattleUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.BattleUserInfo)
  return false;
#undef DO_
}

void BattleUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.BattleUserInfo)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // required int32 battleID = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battleid(), output);
  }

  // required int32 roleID = 3;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.BattleUserInfo)
}

int BattleUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // required int32 battleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }

    // required int32 roleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleUserInfo*>(&from));
}

void BattleUserInfo::MergeFrom(const BattleUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BattleUserInfo::CopyFrom(const BattleUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BattleUserInfo::Swap(BattleUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(battleid_, other->battleid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleUserInfo::GetTypeName() const {
  return "PBBattle.BattleUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TcpEnterBattle::kRandSeedFieldNumber;
const int TcpEnterBattle::kBattleUserInfoFieldNumber;
#endif  // !_MSC_VER

TcpEnterBattle::TcpEnterBattle()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.TcpEnterBattle)
}

void TcpEnterBattle::InitAsDefaultInstance() {
}

TcpEnterBattle::TcpEnterBattle(const TcpEnterBattle& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.TcpEnterBattle)
}

void TcpEnterBattle::SharedCtor() {
  _cached_size_ = 0;
  randseed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcpEnterBattle::~TcpEnterBattle() {
  // @@protoc_insertion_point(destructor:PBBattle.TcpEnterBattle)
  SharedDtor();
}

void TcpEnterBattle::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TcpEnterBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TcpEnterBattle& TcpEnterBattle::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

TcpEnterBattle* TcpEnterBattle::default_instance_ = NULL;

TcpEnterBattle* TcpEnterBattle::New() const {
  return new TcpEnterBattle;
}

void TcpEnterBattle::Clear() {
  randseed_ = 0;
  battleuserinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TcpEnterBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.TcpEnterBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 randSeed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randseed_)));
          set_has_randseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_battleUserInfo;
        break;
      }

      // repeated .PBBattle.BattleUserInfo battleUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_battleUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_battleUserInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.TcpEnterBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.TcpEnterBattle)
  return false;
#undef DO_
}

void TcpEnterBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.TcpEnterBattle)
  // required int32 randSeed = 1;
  if (has_randseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->randseed(), output);
  }

  // repeated .PBBattle.BattleUserInfo battleUserInfo = 2;
  for (int i = 0; i < this->battleuserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->battleuserinfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.TcpEnterBattle)
}

int TcpEnterBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 randSeed = 1;
    if (has_randseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randseed());
    }

  }
  // repeated .PBBattle.BattleUserInfo battleUserInfo = 2;
  total_size += 1 * this->battleuserinfo_size();
  for (int i = 0; i < this->battleuserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleuserinfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpEnterBattle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TcpEnterBattle*>(&from));
}

void TcpEnterBattle::MergeFrom(const TcpEnterBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleuserinfo_.MergeFrom(from.battleuserinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randseed()) {
      set_randseed(from.randseed());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TcpEnterBattle::CopyFrom(const TcpEnterBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpEnterBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->battleuserinfo())) return false;
  return true;
}

void TcpEnterBattle::Swap(TcpEnterBattle* other) {
  if (other != this) {
    std::swap(randseed_, other->randseed_);
    battleuserinfo_.Swap(&other->battleuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TcpEnterBattle::GetTypeName() const {
  return "PBBattle.TcpEnterBattle";
}


// ===================================================================

#ifndef _MSC_VER
const int UdpBattleReady::kUidFieldNumber;
const int UdpBattleReady::kBattleIDFieldNumber;
#endif  // !_MSC_VER

UdpBattleReady::UdpBattleReady()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.UdpBattleReady)
}

void UdpBattleReady::InitAsDefaultInstance() {
}

UdpBattleReady::UdpBattleReady(const UdpBattleReady& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.UdpBattleReady)
}

void UdpBattleReady::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  battleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpBattleReady::~UdpBattleReady() {
  // @@protoc_insertion_point(destructor:PBBattle.UdpBattleReady)
  SharedDtor();
}

void UdpBattleReady::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UdpBattleReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UdpBattleReady& UdpBattleReady::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

UdpBattleReady* UdpBattleReady::default_instance_ = NULL;

UdpBattleReady* UdpBattleReady::New() const {
  return new UdpBattleReady;
}

void UdpBattleReady::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UdpBattleReady*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, battleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UdpBattleReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.UdpBattleReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleID;
        break;
      }

      // required int32 battleID = 2;
      case 2: {
        if (tag == 16) {
         parse_battleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.UdpBattleReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.UdpBattleReady)
  return false;
#undef DO_
}

void UdpBattleReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.UdpBattleReady)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // required int32 battleID = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.UdpBattleReady)
}

int UdpBattleReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // required int32 battleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpBattleReady::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UdpBattleReady*>(&from));
}

void UdpBattleReady::MergeFrom(const UdpBattleReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UdpBattleReady::CopyFrom(const UdpBattleReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpBattleReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UdpBattleReady::Swap(UdpBattleReady* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UdpBattleReady::GetTypeName() const {
  return "PBBattle.UdpBattleReady";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UdpBattleStart::UdpBattleStart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.UdpBattleStart)
}

void UdpBattleStart::InitAsDefaultInstance() {
}

UdpBattleStart::UdpBattleStart(const UdpBattleStart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.UdpBattleStart)
}

void UdpBattleStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpBattleStart::~UdpBattleStart() {
  // @@protoc_insertion_point(destructor:PBBattle.UdpBattleStart)
  SharedDtor();
}

void UdpBattleStart::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UdpBattleStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UdpBattleStart& UdpBattleStart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

UdpBattleStart* UdpBattleStart::default_instance_ = NULL;

UdpBattleStart* UdpBattleStart::New() const {
  return new UdpBattleStart;
}

void UdpBattleStart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UdpBattleStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.UdpBattleStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.UdpBattleStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.UdpBattleStart)
  return false;
#undef DO_
}

void UdpBattleStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.UdpBattleStart)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.UdpBattleStart)
}

int UdpBattleStart::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpBattleStart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UdpBattleStart*>(&from));
}

void UdpBattleStart::MergeFrom(const UdpBattleStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UdpBattleStart::CopyFrom(const UdpBattleStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpBattleStart::IsInitialized() const {

  return true;
}

void UdpBattleStart::Swap(UdpBattleStart* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UdpBattleStart::GetTypeName() const {
  return "PBBattle.UdpBattleStart";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerOperation::kBattleIDFieldNumber;
const int PlayerOperation::kMoveFieldNumber;
const int PlayerOperation::kOperationIDFieldNumber;
const int PlayerOperation::kRightOperationFieldNumber;
const int PlayerOperation::kOperationValue1FieldNumber;
const int PlayerOperation::kOperationValue2FieldNumber;
#endif  // !_MSC_VER

PlayerOperation::PlayerOperation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.PlayerOperation)
}

void PlayerOperation::InitAsDefaultInstance() {
}

PlayerOperation::PlayerOperation(const PlayerOperation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.PlayerOperation)
}

void PlayerOperation::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0;
  move_ = 0;
  operationid_ = 0;
  rightoperation_ = 0;
  operationvalue1_ = 0;
  operationvalue2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerOperation::~PlayerOperation() {
  // @@protoc_insertion_point(destructor:PBBattle.PlayerOperation)
  SharedDtor();
}

void PlayerOperation::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerOperation& PlayerOperation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

PlayerOperation* PlayerOperation::default_instance_ = NULL;

PlayerOperation* PlayerOperation::New() const {
  return new PlayerOperation;
}

void PlayerOperation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerOperation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(battleid_, operationvalue2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayerOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.PlayerOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 battleID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_move;
        break;
      }

      // required int32 move = 2;
      case 2: {
        if (tag == 16) {
         parse_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_)));
          set_has_move();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operationID;
        break;
      }

      // optional int32 operationID = 3;
      case 3: {
        if (tag == 24) {
         parse_operationID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operationid_)));
          set_has_operationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rightOperation;
        break;
      }

      // optional .PBBattle.RightOpType rightOperation = 4;
      case 4: {
        if (tag == 32) {
         parse_rightOperation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBBattle::RightOpType_IsValid(value)) {
            set_rightoperation(static_cast< ::PBBattle::RightOpType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_operationValue1;
        break;
      }

      // optional int32 operationValue1 = 5;
      case 5: {
        if (tag == 40) {
         parse_operationValue1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operationvalue1_)));
          set_has_operationvalue1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_operationValue2;
        break;
      }

      // optional int32 operationValue2 = 6;
      case 6: {
        if (tag == 48) {
         parse_operationValue2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operationvalue2_)));
          set_has_operationvalue2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.PlayerOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.PlayerOperation)
  return false;
#undef DO_
}

void PlayerOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.PlayerOperation)
  // required int32 battleID = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battleid(), output);
  }

  // required int32 move = 2;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->move(), output);
  }

  // optional int32 operationID = 3;
  if (has_operationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operationid(), output);
  }

  // optional .PBBattle.RightOpType rightOperation = 4;
  if (has_rightoperation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rightoperation(), output);
  }

  // optional int32 operationValue1 = 5;
  if (has_operationvalue1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->operationvalue1(), output);
  }

  // optional int32 operationValue2 = 6;
  if (has_operationvalue2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operationvalue2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.PlayerOperation)
}

int PlayerOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 battleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }

    // required int32 move = 2;
    if (has_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move());
    }

    // optional int32 operationID = 3;
    if (has_operationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operationid());
    }

    // optional .PBBattle.RightOpType rightOperation = 4;
    if (has_rightoperation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rightoperation());
    }

    // optional int32 operationValue1 = 5;
    if (has_operationvalue1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operationvalue1());
    }

    // optional int32 operationValue2 = 6;
    if (has_operationvalue2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operationvalue2());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerOperation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerOperation*>(&from));
}

void PlayerOperation::MergeFrom(const PlayerOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_move()) {
      set_move(from.move());
    }
    if (from.has_operationid()) {
      set_operationid(from.operationid());
    }
    if (from.has_rightoperation()) {
      set_rightoperation(from.rightoperation());
    }
    if (from.has_operationvalue1()) {
      set_operationvalue1(from.operationvalue1());
    }
    if (from.has_operationvalue2()) {
      set_operationvalue2(from.operationvalue2());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayerOperation::CopyFrom(const PlayerOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerOperation::Swap(PlayerOperation* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(move_, other->move_);
    std::swap(operationid_, other->operationid_);
    std::swap(rightoperation_, other->rightoperation_);
    std::swap(operationvalue1_, other->operationvalue1_);
    std::swap(operationvalue2_, other->operationvalue2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerOperation::GetTypeName() const {
  return "PBBattle.PlayerOperation";
}


// ===================================================================

#ifndef _MSC_VER
const int UdpUpPlayerOperations::kMesIDFieldNumber;
const int UdpUpPlayerOperations::kOperationFieldNumber;
#endif  // !_MSC_VER

UdpUpPlayerOperations::UdpUpPlayerOperations()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.UdpUpPlayerOperations)
}

void UdpUpPlayerOperations::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  operation_ = const_cast< ::PBBattle::PlayerOperation*>(
      ::PBBattle::PlayerOperation::internal_default_instance());
#else
  operation_ = const_cast< ::PBBattle::PlayerOperation*>(&::PBBattle::PlayerOperation::default_instance());
#endif
}

UdpUpPlayerOperations::UdpUpPlayerOperations(const UdpUpPlayerOperations& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.UdpUpPlayerOperations)
}

void UdpUpPlayerOperations::SharedCtor() {
  _cached_size_ = 0;
  mesid_ = 0;
  operation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpUpPlayerOperations::~UdpUpPlayerOperations() {
  // @@protoc_insertion_point(destructor:PBBattle.UdpUpPlayerOperations)
  SharedDtor();
}

void UdpUpPlayerOperations::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete operation_;
  }
}

void UdpUpPlayerOperations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UdpUpPlayerOperations& UdpUpPlayerOperations::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

UdpUpPlayerOperations* UdpUpPlayerOperations::default_instance_ = NULL;

UdpUpPlayerOperations* UdpUpPlayerOperations::New() const {
  return new UdpUpPlayerOperations;
}

void UdpUpPlayerOperations::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mesid_ = 0;
    if (has_operation()) {
      if (operation_ != NULL) operation_->::PBBattle::PlayerOperation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UdpUpPlayerOperations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.UdpUpPlayerOperations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mesID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mesid_)));
          set_has_mesid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_operation;
        break;
      }

      // required .PBBattle.PlayerOperation operation = 2;
      case 2: {
        if (tag == 18) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.UdpUpPlayerOperations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.UdpUpPlayerOperations)
  return false;
#undef DO_
}

void UdpUpPlayerOperations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.UdpUpPlayerOperations)
  // required int32 mesID = 1;
  if (has_mesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mesid(), output);
  }

  // required .PBBattle.PlayerOperation operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->operation(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.UdpUpPlayerOperations)
}

int UdpUpPlayerOperations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mesID = 1;
    if (has_mesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mesid());
    }

    // required .PBBattle.PlayerOperation operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operation());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpUpPlayerOperations::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UdpUpPlayerOperations*>(&from));
}

void UdpUpPlayerOperations::MergeFrom(const UdpUpPlayerOperations& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mesid()) {
      set_mesid(from.mesid());
    }
    if (from.has_operation()) {
      mutable_operation()->::PBBattle::PlayerOperation::MergeFrom(from.operation());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UdpUpPlayerOperations::CopyFrom(const UdpUpPlayerOperations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpUpPlayerOperations::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_operation()) {
    if (!this->operation().IsInitialized()) return false;
  }
  return true;
}

void UdpUpPlayerOperations::Swap(UdpUpPlayerOperations* other) {
  if (other != this) {
    std::swap(mesid_, other->mesid_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UdpUpPlayerOperations::GetTypeName() const {
  return "PBBattle.UdpUpPlayerOperations";
}


// ===================================================================

#ifndef _MSC_VER
const int AllPlayerOperation::kOperationsFieldNumber;
#endif  // !_MSC_VER

AllPlayerOperation::AllPlayerOperation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.AllPlayerOperation)
}

void AllPlayerOperation::InitAsDefaultInstance() {
}

AllPlayerOperation::AllPlayerOperation(const AllPlayerOperation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.AllPlayerOperation)
}

void AllPlayerOperation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllPlayerOperation::~AllPlayerOperation() {
  // @@protoc_insertion_point(destructor:PBBattle.AllPlayerOperation)
  SharedDtor();
}

void AllPlayerOperation::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AllPlayerOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AllPlayerOperation& AllPlayerOperation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

AllPlayerOperation* AllPlayerOperation::default_instance_ = NULL;

AllPlayerOperation* AllPlayerOperation::New() const {
  return new AllPlayerOperation;
}

void AllPlayerOperation::Clear() {
  operations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AllPlayerOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.AllPlayerOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBBattle.PlayerOperation operations = 1;
      case 1: {
        if (tag == 10) {
         parse_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_operations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.AllPlayerOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.AllPlayerOperation)
  return false;
#undef DO_
}

void AllPlayerOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.AllPlayerOperation)
  // repeated .PBBattle.PlayerOperation operations = 1;
  for (int i = 0; i < this->operations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->operations(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.AllPlayerOperation)
}

int AllPlayerOperation::ByteSize() const {
  int total_size = 0;

  // repeated .PBBattle.PlayerOperation operations = 1;
  total_size += 1 * this->operations_size();
  for (int i = 0; i < this->operations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operations(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllPlayerOperation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AllPlayerOperation*>(&from));
}

void AllPlayerOperation::MergeFrom(const AllPlayerOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  operations_.MergeFrom(from.operations_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AllPlayerOperation::CopyFrom(const AllPlayerOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllPlayerOperation::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->operations())) return false;
  return true;
}

void AllPlayerOperation::Swap(AllPlayerOperation* other) {
  if (other != this) {
    operations_.Swap(&other->operations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AllPlayerOperation::GetTypeName() const {
  return "PBBattle.AllPlayerOperation";
}


// ===================================================================

#ifndef _MSC_VER
const int UdpDownFrameOperations::kFrameIDFieldNumber;
const int UdpDownFrameOperations::kOperationsFieldNumber;
#endif  // !_MSC_VER

UdpDownFrameOperations::UdpDownFrameOperations()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.UdpDownFrameOperations)
}

void UdpDownFrameOperations::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  operations_ = const_cast< ::PBBattle::AllPlayerOperation*>(
      ::PBBattle::AllPlayerOperation::internal_default_instance());
#else
  operations_ = const_cast< ::PBBattle::AllPlayerOperation*>(&::PBBattle::AllPlayerOperation::default_instance());
#endif
}

UdpDownFrameOperations::UdpDownFrameOperations(const UdpDownFrameOperations& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.UdpDownFrameOperations)
}

void UdpDownFrameOperations::SharedCtor() {
  _cached_size_ = 0;
  frameid_ = 0;
  operations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpDownFrameOperations::~UdpDownFrameOperations() {
  // @@protoc_insertion_point(destructor:PBBattle.UdpDownFrameOperations)
  SharedDtor();
}

void UdpDownFrameOperations::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete operations_;
  }
}

void UdpDownFrameOperations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UdpDownFrameOperations& UdpDownFrameOperations::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

UdpDownFrameOperations* UdpDownFrameOperations::default_instance_ = NULL;

UdpDownFrameOperations* UdpDownFrameOperations::New() const {
  return new UdpDownFrameOperations;
}

void UdpDownFrameOperations::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    frameid_ = 0;
    if (has_operations()) {
      if (operations_ != NULL) operations_->::PBBattle::AllPlayerOperation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UdpDownFrameOperations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.UdpDownFrameOperations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 frameID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_operations;
        break;
      }

      // required .PBBattle.AllPlayerOperation operations = 2;
      case 2: {
        if (tag == 18) {
         parse_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.UdpDownFrameOperations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.UdpDownFrameOperations)
  return false;
#undef DO_
}

void UdpDownFrameOperations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.UdpDownFrameOperations)
  // required int32 frameID = 1;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frameid(), output);
  }

  // required .PBBattle.AllPlayerOperation operations = 2;
  if (has_operations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->operations(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.UdpDownFrameOperations)
}

int UdpDownFrameOperations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 frameID = 1;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // required .PBBattle.AllPlayerOperation operations = 2;
    if (has_operations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpDownFrameOperations::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UdpDownFrameOperations*>(&from));
}

void UdpDownFrameOperations::MergeFrom(const UdpDownFrameOperations& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_operations()) {
      mutable_operations()->::PBBattle::AllPlayerOperation::MergeFrom(from.operations());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UdpDownFrameOperations::CopyFrom(const UdpDownFrameOperations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpDownFrameOperations::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_operations()) {
    if (!this->operations().IsInitialized()) return false;
  }
  return true;
}

void UdpDownFrameOperations::Swap(UdpDownFrameOperations* other) {
  if (other != this) {
    std::swap(frameid_, other->frameid_);
    std::swap(operations_, other->operations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UdpDownFrameOperations::GetTypeName() const {
  return "PBBattle.UdpDownFrameOperations";
}


// ===================================================================

#ifndef _MSC_VER
const int UdpUpDeltaFrames::kBattleIDFieldNumber;
const int UdpUpDeltaFrames::kFramesFieldNumber;
#endif  // !_MSC_VER

UdpUpDeltaFrames::UdpUpDeltaFrames()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.UdpUpDeltaFrames)
}

void UdpUpDeltaFrames::InitAsDefaultInstance() {
}

UdpUpDeltaFrames::UdpUpDeltaFrames(const UdpUpDeltaFrames& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.UdpUpDeltaFrames)
}

void UdpUpDeltaFrames::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpUpDeltaFrames::~UdpUpDeltaFrames() {
  // @@protoc_insertion_point(destructor:PBBattle.UdpUpDeltaFrames)
  SharedDtor();
}

void UdpUpDeltaFrames::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UdpUpDeltaFrames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UdpUpDeltaFrames& UdpUpDeltaFrames::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

UdpUpDeltaFrames* UdpUpDeltaFrames::default_instance_ = NULL;

UdpUpDeltaFrames* UdpUpDeltaFrames::New() const {
  return new UdpUpDeltaFrames;
}

void UdpUpDeltaFrames::Clear() {
  battleid_ = 0;
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UdpUpDeltaFrames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.UdpUpDeltaFrames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 battleID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frames;
        break;
      }

      // repeated int32 frames = 2;
      case 2: {
        if (tag == 16) {
         parse_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_frames())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_frames())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.UdpUpDeltaFrames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.UdpUpDeltaFrames)
  return false;
#undef DO_
}

void UdpUpDeltaFrames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.UdpUpDeltaFrames)
  // required int32 battleID = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battleid(), output);
  }

  // repeated int32 frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->frames(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.UdpUpDeltaFrames)
}

int UdpUpDeltaFrames::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 battleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }

  }
  // repeated int32 frames = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->frames_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->frames(i));
    }
    total_size += 1 * this->frames_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpUpDeltaFrames::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UdpUpDeltaFrames*>(&from));
}

void UdpUpDeltaFrames::MergeFrom(const UdpUpDeltaFrames& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UdpUpDeltaFrames::CopyFrom(const UdpUpDeltaFrames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpUpDeltaFrames::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UdpUpDeltaFrames::Swap(UdpUpDeltaFrames* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UdpUpDeltaFrames::GetTypeName() const {
  return "PBBattle.UdpUpDeltaFrames";
}


// ===================================================================

#ifndef _MSC_VER
const int UdpDownDeltaFrames::kFramesDataFieldNumber;
#endif  // !_MSC_VER

UdpDownDeltaFrames::UdpDownDeltaFrames()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.UdpDownDeltaFrames)
}

void UdpDownDeltaFrames::InitAsDefaultInstance() {
}

UdpDownDeltaFrames::UdpDownDeltaFrames(const UdpDownDeltaFrames& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.UdpDownDeltaFrames)
}

void UdpDownDeltaFrames::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpDownDeltaFrames::~UdpDownDeltaFrames() {
  // @@protoc_insertion_point(destructor:PBBattle.UdpDownDeltaFrames)
  SharedDtor();
}

void UdpDownDeltaFrames::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UdpDownDeltaFrames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UdpDownDeltaFrames& UdpDownDeltaFrames::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

UdpDownDeltaFrames* UdpDownDeltaFrames::default_instance_ = NULL;

UdpDownDeltaFrames* UdpDownDeltaFrames::New() const {
  return new UdpDownDeltaFrames;
}

void UdpDownDeltaFrames::Clear() {
  framesdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UdpDownDeltaFrames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.UdpDownDeltaFrames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBBattle.UdpDownFrameOperations framesData = 1;
      case 1: {
        if (tag == 10) {
         parse_framesData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_framesdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_framesData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.UdpDownDeltaFrames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.UdpDownDeltaFrames)
  return false;
#undef DO_
}

void UdpDownDeltaFrames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.UdpDownDeltaFrames)
  // repeated .PBBattle.UdpDownFrameOperations framesData = 1;
  for (int i = 0; i < this->framesdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->framesdata(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.UdpDownDeltaFrames)
}

int UdpDownDeltaFrames::ByteSize() const {
  int total_size = 0;

  // repeated .PBBattle.UdpDownFrameOperations framesData = 1;
  total_size += 1 * this->framesdata_size();
  for (int i = 0; i < this->framesdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->framesdata(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpDownDeltaFrames::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UdpDownDeltaFrames*>(&from));
}

void UdpDownDeltaFrames::MergeFrom(const UdpDownDeltaFrames& from) {
  GOOGLE_CHECK_NE(&from, this);
  framesdata_.MergeFrom(from.framesdata_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UdpDownDeltaFrames::CopyFrom(const UdpDownDeltaFrames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpDownDeltaFrames::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->framesdata())) return false;
  return true;
}

void UdpDownDeltaFrames::Swap(UdpDownDeltaFrames* other) {
  if (other != this) {
    framesdata_.Swap(&other->framesdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UdpDownDeltaFrames::GetTypeName() const {
  return "PBBattle.UdpDownDeltaFrames";
}


// ===================================================================

#ifndef _MSC_VER
const int UdpUpGameOver::kBattleIDFieldNumber;
#endif  // !_MSC_VER

UdpUpGameOver::UdpUpGameOver()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.UdpUpGameOver)
}

void UdpUpGameOver::InitAsDefaultInstance() {
}

UdpUpGameOver::UdpUpGameOver(const UdpUpGameOver& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.UdpUpGameOver)
}

void UdpUpGameOver::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpUpGameOver::~UdpUpGameOver() {
  // @@protoc_insertion_point(destructor:PBBattle.UdpUpGameOver)
  SharedDtor();
}

void UdpUpGameOver::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UdpUpGameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UdpUpGameOver& UdpUpGameOver::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

UdpUpGameOver* UdpUpGameOver::default_instance_ = NULL;

UdpUpGameOver* UdpUpGameOver::New() const {
  return new UdpUpGameOver;
}

void UdpUpGameOver::Clear() {
  battleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UdpUpGameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.UdpUpGameOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 battleID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.UdpUpGameOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.UdpUpGameOver)
  return false;
#undef DO_
}

void UdpUpGameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.UdpUpGameOver)
  // required int32 battleID = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.UdpUpGameOver)
}

int UdpUpGameOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 battleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpUpGameOver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UdpUpGameOver*>(&from));
}

void UdpUpGameOver::MergeFrom(const UdpUpGameOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UdpUpGameOver::CopyFrom(const UdpUpGameOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpUpGameOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UdpUpGameOver::Swap(UdpUpGameOver* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UdpUpGameOver::GetTypeName() const {
  return "PBBattle.UdpUpGameOver";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UdpDownGameOver::UdpDownGameOver()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBattle.UdpDownGameOver)
}

void UdpDownGameOver::InitAsDefaultInstance() {
}

UdpDownGameOver::UdpDownGameOver(const UdpDownGameOver& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBattle.UdpDownGameOver)
}

void UdpDownGameOver::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpDownGameOver::~UdpDownGameOver() {
  // @@protoc_insertion_point(destructor:PBBattle.UdpDownGameOver)
  SharedDtor();
}

void UdpDownGameOver::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UdpDownGameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UdpDownGameOver& UdpDownGameOver::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PBBattle_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PBBattle_2eproto();
#endif
  return *default_instance_;
}

UdpDownGameOver* UdpDownGameOver::default_instance_ = NULL;

UdpDownGameOver* UdpDownGameOver::New() const {
  return new UdpDownGameOver;
}

void UdpDownGameOver::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UdpDownGameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBBattle.UdpDownGameOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:PBBattle.UdpDownGameOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBattle.UdpDownGameOver)
  return false;
#undef DO_
}

void UdpDownGameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBattle.UdpDownGameOver)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBBattle.UdpDownGameOver)
}

int UdpDownGameOver::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpDownGameOver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UdpDownGameOver*>(&from));
}

void UdpDownGameOver::MergeFrom(const UdpDownGameOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UdpDownGameOver::CopyFrom(const UdpDownGameOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpDownGameOver::IsInitialized() const {

  return true;
}

void UdpDownGameOver::Swap(UdpDownGameOver* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UdpDownGameOver::GetTypeName() const {
  return "PBBattle.UdpDownGameOver";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PBBattle

// @@protoc_insertion_point(global_scope)
